Meshing
-------

INTRODUCTION

Purpose: A decentralised, peer-to-peer layer for relational databases.
License: Open source, specific licence to be decided.
Language: PHP5.2
Platform: Unix-like platforms, Linux, Mac. Probably Windows, but not tested.
User interface: Command line for the prototype, web tools to be devised later.
Database: Anything supported by Propel 1.6. At least MySQL, PostgreSQL, and likely others.
Say hey to: Jon <projects.ws {at} jondh.me.uk>

Read intro here:

http://blog.jondh.me.uk/2011/08/distributing-a-structured-database-over-an-ad-hoc-peer-to-peer-network/

Read tech discussion here:

http://blog.jondh.me.uk/2011/08/p2p-database-technical-ideas/

GETTING STARTED

Here's how to run the demo. Unpack the tarball (or from git) on a server, and cd to that folder.
You should be able to run this command to get a list of commands:

	./meshing

If you run into trouble, make sure at least PHP5.2 or 5.3 is installed on your system, via this:

	php -v

OK, so assuming that the command list has worked for you, create an empty database on your target
platform, and set up user credentials to access it. Edit /database/system/build.properties so
your connection details are set up for your platform:

	# Database driver
	propel.database = pgsql

	# Connection details
	propel.database.url = pgsql:host=localhost dbname=p2p2 user=jon password=
	propel.database.user = jon
	propel.database.password = password

Then run the following command to build the system tables:

	./meshing system:build --database --verbose

Be careful with this command generally; the '--database' flag clears the whole of the system
database, so don't do this on an existing installation!

OK, hopefully that went OK. Now let's create a schema definition, and for speed we'll use an
existing example: a jobs database. Run the following:

	./meshing schema:add --name jobs --name demos/jobs.xml

If you want to know what the & entity elements get replaced to, look in database/system/snippets/*.
OK, that command will have added the schema to the installation folder, inside
database/schemas/jobs/schema.xml. It will also set up the table classes in database/models/jobs/.

Next, we'll need a new database connection for our node, so create one in your database now. In
theory you can use the same one as before, but to keep node tables separate from system tables,
it is a good idea to have a separate one. Add that thus:

	./meshing connection:add \
		--name jobsconn --adaptor pgsql --host localhost \
		--user jon --password mypass
		--database mydb

Of course, change the values to fit your situation (e.g. if you're using MySQL then specify 'mysql'
as the adaptor). There aren't any checks yet that the connection will work, so you may wish to
test from the CLI first, using your db client.

[TODO: Next steps - ./meshing node:add, ./meshing node:build]